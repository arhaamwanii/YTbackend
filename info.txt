IMAGE STORAGE 
    - they will be stored seperately on third party apps 
    - first they are stored in server to prevent refresh loss

.gitkeep 
    - is used to add a folder  

touch 
    - touch is used to create apps 

nodemon 
    - used to automatically restart the server
    - it is to be installed as a dev dependency 
        - i.e not to be pushed to the user 
        - which is done by installing it like "npm install"
 
to enter mongoDB atlas 
    - two things are required 
    
    - YOUR IP ADRESS SHOULD BE ALLOWED
    - YOU SHOULD HAVE CORRECT ID.PASSWORD

    - proffesionlly the only ip adress is allowed where the backend code is running 
    - so that it can access the data base

UTILITES 
    - utils
    - this is the type of functionlaity that will be used here and there
        - e.g image upload

dot.env 
    - used to use the env variables in dev environment 
    - it uses require syntax by default 

DB CONNECTION

    - it can be done in two way  
        - doing it directly via a index. file 
            - 
        - doing it via a db folder file
            - cleaner
    
    - MONGOOSE - connects with database
    - mongoose.connect
    -> problem will come when connecting with db 
        - try catch -- orr if else
        - promises
    -> data base is always in other conenent 
        - async await 
        - it takes time to conect 

    - not having ; semicolon at the end of the code previous to if-else can cause problems 
        - so it is better to do it at the start of your code
    
            import mongoose from "mongoose";
            import { DB_NAME } from "../constants.js";

            const connectDB = async () => {
                try {
                    const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
                    console.log(connectionInstance)
                    console.log(`\n MongoDB connected !! DB HOST : ${connectionInstance.connection.host}`)
                } catch(error){
                    console.log("MONGODB connection ERROR : " , error)
                    process.exit(1)
                }
            }

            export default connectDB

    - connecting to a db is pretty simple by using mongoose.connect 
    - in an async function 
    - try catch to make sure error are catched 
    - logging errors 
    - env variables - they can be imported in the main file and that would do the job for every file
    - gitignore , env use(dot.env)

- cookie parser 
    - allows us to cread cookies on users browser
    - secure cookies can be made and stored on user browser

CORS 
    - it is used to specify access and see which url is given access to make the calls to the backend
    - it is a middle ware
    - that checks for the the right incomming domain 

MIDDLE WARES 
    - these are code funtions that are executed between req and res
    - req
        - authentication 
        - running fucction 
    - res

4 ELEMENTS
    - (err , req , res , next )

    - req = what came in 
    - res = what respose we are going to send
    - next = flag - to make pass from one middleware to another
    - used to throw and catch errors 
    

UITLS
    - Errors , Response , async handler 
    - these are writtein in utils just to strandadise our response


MODELS 
    - id is self generated by mongoDB
    -  saved in BSON data -- not in JSON DATA