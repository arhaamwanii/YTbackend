IMAGE STORAGE 
    - they will be stored seperately on third party apps 
    - first they are stored in server to prevent refresh loss

.gitkeep 
    - is used to add a folder  

touch 
    - touch is used to create apps 

nodemon 
    - used to automatically restart the server
    - it is to be installed as a dev dependency 
        - i.e not to be pushed to the user 
        - which is done by installing it like "npm install"
 
to enter mongoDB atlas 
    - two things are required 
    
    - YOUR IP ADRESS SHOULD BE ALLOWED
    - YOU SHOULD HAVE CORRECT ID.PASSWORD

    - proffesionlly the only ip adress is allowed where the backend code is running 
    - so that it can access the data base

UTILITES 
    - utils
    - this is the type of functionlaity that will be used here and there
        - e.g image upload

dot.env 
    - used to use the env variables in dev environment 
    - it uses require syntax by default 

DB CONNECTION

    - it can be done in two way  
        - doing it directly via a index. file 
            - 
        - doing it via a db folder file
            - cleaner
    
    - MONGOOSE - connects with database
    - mongoose.connect
    -> problem will come when connecting with db 
        - try catch -- orr if else
        - promises
    -> data base is always in other conenent 
        - async await 
        - it takes time to conect 

    - not having ; semicolon at the end of the code previous to if-else can cause problems 
        - so it is better to do it at the start of your code
    
            import mongoose from "mongoose";
            import { DB_NAME } from "../constants.js";

            const connectDB = async () => {
                try {
                    const connectionInstance = await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
                    console.log(connectionInstance)
                    console.log(`\n MongoDB connected !! DB HOST : ${connectionInstance.connection.host}`)
                } catch(error){
                    console.log("MONGODB connection ERROR : " , error)
                    process.exit(1)
                }
            }

            export default connectDB

    - connecting to a db is pretty simple by using mongoose.connect 
    - in an async function 
    - try catch to make sure error are catched 
    - logging errors 
    - env variables - they can be imported in the main file and that would do the job for every file
    - gitignore , env use(dot.env)

- cookie parser 
    - allows us to cread cookies on users browser
    - secure cookies can be made and stored on user browser

CORS 
    - it is used to specify access and see which url is given access to make the calls to the backend
    - it is a middle ware
    - that checks for the the right incomming domain 

MIDDLE WARES 
    - these are code funtions that are executed between req and res
    - req
        - authentication 
        - running fucction 
    - res

4 ELEMENTS
    - (err , req , res , next )

    - req = what came in 
    - res = what respose we are going to send
    - next = flag - to make pass from one middleware to another
    - used to throw and catch errors 
    

UITLS
    - Errors , Response , async handler 
    - these are writtein in utils just to strandadise our response


MODELS 
    - id is self generated by mongoDB
    -  saved in BSON data -- not in JSON DATA

PRE HOOK -- middle ware
    - just before a data is saved 
    - these hooks are executed

FILE UPLOAD
    - it is majority backend thing 
    - most of file handling is not done on our own server 
    - uplaoded on third party service

    - not every api endpoint has file upload
    - seperate utility 
        - reusable 
        - so that we can use it again 

    - cloudnary
        - it is a sdk : software development kit 
    - multer 
        - we will take the file from the user 
        - keep it on the server temporarly
    - then we will take this from the local storage and uplaod it to the server 


HTTP CRASH COURSE
http - noraml data
https - encrypted data 

URI - unified resourse identifier 
    - URN : unified resourse name - gives the resourse a name : which generaly does not change
    - URL : unified resourse locator - gives us the location of the resourse on internet

HTTPS HEADER

    - meta data : data about the data 
    - headers are in both req or res
        - where req is made from sends a dfferent header : postman , browser ..
        - where res is made frmo sends a different response; your server : 404 not found , ..
    - headers do a lot of things 
        - caching 
        - authentication
            - cookies 
        - state management
            - what is the state of the user 
    - x-pfix which is now depricated

    - REQUEST HEADERS 
        - from client 
    - RESPONSE HEADERS 
        - from servers
        - thee is a convetion
        - can be done any way 
    - REPRESENTATION HEADERS
        - data about compression algorithm 
    - PAYLOAD HEADERS 
        - data
            - id and so on
    - SECURITY 

    MOST COMMON HEADERS

    accept : application/json
        -
    user  : agent  
        - where the request has came from : post man 
        - safari chrome , mobile browser so on
    authorization 
        - bearer _______________ 
        - used to send atuorization tokens 
    cookies 
        - object
        - information about stuff 
    cache control 

    CORS HEADERS 
    - where are we allowing access from 
    - what methods are allowed . GET. PUSH...

    HTTP METHODS 
    - tells what methods am i perfroming 
    - we have to make them

    - GET : retirive a resourse
    - POST : interacts with a resourse(mostly add)
    - PUT : replace a resourse
    - DELETE
    - PATCH(sometimes)

    - HEAD : no message body 
    - OPTONS : what are available
    - TRACE : loopback test - show proxies    

HTTP STATUS CODE
    - 1xx : Informational : passing info to user 
    - 2xx : Success message 
    - 3xx : Redirection (temp + perminent)
    - 4xx : clietn error(no internet + no pass + auth token wrong + wrong image size ///)
    - 5xx : server errors (api error + excess trafic and so on)
    

    200 : OK

REGISTRATION OF THE USER
    - there are a lot steps
        - breaking down big steps into smaller ones
    - 

index.file is mainly userd to conifgure listen 

ROUTES
